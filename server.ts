/**
 * Custom Next.js Server with WebSocket Support + Booking System Workers
 *
 * ÌÜµÌï© Í∏∞Îä•:
 * - Next.js Ïï± ÏÑúÎ≤Ñ
 * - WebSocket (Í∏∞Ï°¥)
 * - Socket.IO Ïã§ÏãúÍ∞Ñ ÏÑúÎ≤Ñ
 * - HOLD ÎßåÎ£å ÏõåÏª§
 * - Î≥¥Ï¶ùÍ∏à ÏÇ¨Ï†ÑÏäπÏù∏ ÏõåÏª§
 */

import { createServer } from 'http';
import { parse } from 'url';
import next from 'next';
import { wsServer } from './utils/websocket-server';

// ÏòàÏïΩ ÏãúÏä§ÌÖú ÌÜµÌï©
import { realtimeServer } from './services/realtime/socketServer';
import { startExpiryWorker, getExpiryMetrics } from './services/jobs/bookingExpiry.worker';
import { startDepositPreauthWorker, getDepositPreauthMetrics } from './services/jobs/depositPreauth.worker';

const dev = process.env.NODE_ENV !== 'production';
const hostname = process.env.HOST || 'localhost';
const port = parseInt(process.env.PORT || '3000', 10);

const app = next({ dev, hostname, port });
const handle = app.getRequestHandler();

app.prepare().then(() => {
  const server = createServer(async (req, res) => {
    try {
      const parsedUrl = parse(req.url!, true);
      await handle(req, res, parsedUrl);
    } catch (err) {
      console.error('Error occurred handling', req.url, err);
      res.statusCode = 500;
      res.end('internal server error');
    }
  });

  // ===== WebSocket ÏÑúÎ≤Ñ Ïó∞Í≤∞ (Í∏∞Ï°¥) =====
  wsServer.attach(server);

  // ===== Socket.IO Ïã§ÏãúÍ∞Ñ ÏÑúÎ≤Ñ Ïó∞Í≤∞ (Ïã†Í∑ú) =====
  console.log('üöÄ [Server] Initializing Socket.IO realtime server...');
  realtimeServer.initialize(server);

  // ===== ÏòàÏïΩ ÏãúÏä§ÌÖú ÏõåÏª§ ÏãúÏûë =====
  console.log('üöÄ [Server] Starting booking system workers...');

  try {
    // HOLD ÎßåÎ£å ÏõåÏª§
    startExpiryWorker();
    console.log('‚úÖ [Server] Booking expiry worker started');

    // Î≥¥Ï¶ùÍ∏à ÏÇ¨Ï†ÑÏäπÏù∏ ÏõåÏª§
    startDepositPreauthWorker();
    console.log('‚úÖ [Server] Deposit preauth worker started');
  } catch (error) {
    console.error('‚ùå [Server] Failed to start workers:', error);
  }

  // ===== ÏÑúÎ≤Ñ ÌÜµÍ≥Ñ Ï∂úÎ†• (30Ï¥àÎßàÎã§) =====
  setInterval(() => {
    const wsStats = wsServer.getStats();
    const realtimeStats = realtimeServer.getMetrics();
    const expiryStats = getExpiryMetrics();
    const preauthStats = getDepositPreauthMetrics();

    console.log('\nüìä [Server Stats]');
    console.log('   WebSocket:', wsStats);
    console.log('   Realtime:', realtimeStats);
    console.log('   Expiry Worker:', expiryStats);
    console.log('   Preauth Worker:', preauthStats);
  }, 30000);

  server
    .once('error', (err) => {
      console.error(err);
      process.exit(1);
    })
    .listen(port, () => {
      console.log('\nüéâ ===== Server Ready =====');
      console.log(`‚úÖ Next.js: http://${hostname}:${port}`);
      console.log(`‚úÖ WebSocket: ws://${hostname}:${port}`);
      console.log(`‚úÖ Socket.IO: http://${hostname}:${port}/socket.io`);
      console.log(`‚úÖ Booking Workers: Active`);
      console.log('===========================\n');
    });

  // ===== Graceful shutdown =====
  const shutdown = async () => {
    console.log('\nüëã [Server] Shutting down gracefully...');

    // ÏõåÏª§ Ï†ïÎ¶¨ (cronÏùÄ ÏûêÎèôÏúºÎ°ú Ï†ïÎ¶¨Îê®)
    console.log('   - Stopping workers...');

    // Ïã§ÏãúÍ∞Ñ ÏÑúÎ≤Ñ Ï¢ÖÎ£å
    console.log('   - Closing realtime server...');
    await realtimeServer.shutdown();

    // WebSocket Ï¢ÖÎ£å
    console.log('   - Closing WebSocket...');
    wsServer.close();

    // HTTP ÏÑúÎ≤Ñ Ï¢ÖÎ£å
    console.log('   - Closing HTTP server...');
    server.close(() => {
      console.log('‚úÖ [Server] Shutdown complete');
      process.exit(0);
    });

    // Í∞ïÏ†ú Ï¢ÖÎ£å ÌÉÄÏûÑÏïÑÏõÉ (10Ï¥à)
    setTimeout(() => {
      console.error('‚ö†Ô∏è [Server] Forced shutdown after timeout');
      process.exit(1);
    }, 10000);
  };

  process.on('SIGTERM', shutdown);
  process.on('SIGINT', shutdown);
});
