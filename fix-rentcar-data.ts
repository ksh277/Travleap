/**
 * Î†åÌä∏Ïπ¥ Îç∞Ïù¥ÌÑ∞ ÏàòÏ†ï Ïä§ÌÅ¨Î¶ΩÌä∏
 * 1. ENUM Í∞í ÏàòÏ†ï (ÌïúÍ∏Ä ‚Üí ÏòÅÏñ¥, automatic ‚Üí auto)
 * 2. Í≥†ÏïÑ Ï∞®Îüâ ÏÇ≠Ï†ú
 */

import { connect } from '@planetscale/database';
import 'dotenv/config';

const connection = connect({ url: process.env.DATABASE_URL! });

async function checkSchema() {
  console.log('\nüîç Checking rentcar_vendors schema...');
  const result = await connection.execute('DESCRIBE rentcar_vendors');
  console.log('Columns:');
  result.rows.forEach((row: any) => {
    console.log(`  - ${row.Field} (${row.Type})`);
  });
}

async function fixVehicleTypeENUMs() {
  console.log('\nüîß Fixing vehicle_type ENUM values...');

  // ÏÑ∏Îã® ‚Üí sedan
  const result1 = await connection.execute(
    `UPDATE rentcar_vehicles
    SET vehicle_type = 'sedan'
    WHERE vehicle_type = 'ÏÑ∏Îã®'`
  );
  console.log(`‚úÖ Updated ${result1.rowsAffected} vehicles: 'ÏÑ∏Îã®' ‚Üí 'sedan'`);
}

async function fixTransmissionENUMs() {
  console.log('\nüîß Checking transmission ENUM values...');
  console.log('   ‚ÑπÔ∏è  DB uses ENUM(\'manual\',\'automatic\') - no changes needed');
  console.log('   ‚ÑπÔ∏è  API layer handles mapping automatic ‚Üî auto');
}

async function deleteOrphanedVehicles() {
  console.log('\nüóëÔ∏è  Deleting orphaned vehicles...');

  // Find orphaned first
  const orphaned = await connection.execute(
    `SELECT rv.id, rv.brand, rv.model
    FROM rentcar_vehicles rv
    LEFT JOIN rentcar_vendors v ON rv.vendor_id = v.id
    WHERE v.id IS NULL`
  );

  console.log(`Found ${orphaned.rows.length} orphaned vehicles:`);
  orphaned.rows.forEach((v: any) => {
    console.log(`  - ID ${v.id}: ${v.brand} ${v.model}`);
  });

  if (orphaned.rows.length > 0) {
    const result = await connection.execute(
      `DELETE rv FROM rentcar_vehicles rv
      LEFT JOIN rentcar_vendors v ON rv.vendor_id = v.id
      WHERE v.id IS NULL`
    );
    console.log(`‚úÖ Deleted ${result.rowsAffected} orphaned vehicles`);
  }
}

async function verifyFixes() {
  console.log('\n‚úÖ Verifying fixes...');

  // Check vehicle_type
  const invalidTypes = await connection.execute(
    `SELECT DISTINCT vehicle_type
    FROM rentcar_vehicles
    WHERE vehicle_type NOT IN ('sedan', 'suv', 'van', 'truck', 'sports')
      AND vehicle_type IS NOT NULL`
  );

  if (invalidTypes.rows.length > 0) {
    console.log('‚ö†Ô∏è  Still have invalid vehicle_types:');
    invalidTypes.rows.forEach((r: any) => console.log(`  - ${r.vehicle_type}`));
  } else {
    console.log('‚úÖ All vehicle_types are valid');
  }

  // Check transmission
  const invalidTrans = await connection.execute(
    `SELECT DISTINCT transmission
    FROM rentcar_vehicles
    WHERE transmission NOT IN ('automatic', 'manual')
      AND transmission IS NOT NULL`
  );

  if (invalidTrans.rows.length > 0) {
    console.log('‚ö†Ô∏è  Still have invalid transmissions:');
    invalidTrans.rows.forEach((r: any) => console.log(`  - ${r.transmission}`));
  } else {
    console.log('‚úÖ All transmissions are valid');
  }

  // Check orphaned
  const orphaned = await connection.execute(
    `SELECT COUNT(*) as count
    FROM rentcar_vehicles rv
    LEFT JOIN rentcar_vendors v ON rv.vendor_id = v.id
    WHERE v.id IS NULL`
  );

  if (orphaned.rows[0].count > 0) {
    console.log(`‚ö†Ô∏è  Still have ${orphaned.rows[0].count} orphaned vehicles`);
  } else {
    console.log('‚úÖ No orphaned vehicles');
  }
}

async function main() {
  console.log('üöÄ Starting rentcar data fixes...\n');

  await checkSchema();
  await fixVehicleTypeENUMs();
  await fixTransmissionENUMs();
  await deleteOrphanedVehicles();
  await verifyFixes();

  console.log('\n‚úÖ All fixes completed!\n');
  process.exit(0);
}

main();
